<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI For Special Collections Consolidated Schema</title>
            </titleStmt>
            <publicationStmt>
                <publisher>Cambridge Digital Collections Platform</publisher>
                <availability status="free">
                    <p>TEI material can be licensed differently depending on the use you intend to make of it. Hence it is made available under both the CC+BY and BSD-2 licences. The CC+BY licence is generally appropriate for usages which treat TEI content as data or documentation. The BSD-2 licence is generally appropriate for usage of TEI content in a software environment. For further information or clarification, please contact the TEI Consortium (info@tei-c.org).</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <bibl>
                    <title>TEI For Special Collections Consolidated Schema</title>
                </bibl>
            </sourceDesc>
        </fileDesc>
    </teiHeader>
    <text>
        <body>
            <div xml:id="schema">
                <head>Cambridge Digital Collections Platform</head>
                <schemaSpec ident="manuscripts-catalogue" start="TEI teiCorpus" prefix="tei_" targetLang="en" docLang="en" defaultExceptions="http://www.tei-c.org/ns/1.0 http://www.w3.org/1998/Math/MathML teix:egXML" source="https://raw.githubusercontent.com/tei-for-special-collections/consolidated-schema/refs/heads/main/releases/odd/consolidated-schema.compiled.odd">
                    <moduleRef url="https://www.tei-c.org/release/xml/tei/Exemplars/mathml2-main.rng"/>
                    <moduleRef n="01" key="tei"/>
                    <moduleRef n="02" key="header"/>
                    <moduleRef n="03" key="core"/>
                    <moduleRef n="04" key="textstructure"/>
                    <moduleRef n="05" key="gaiji"/>
                    <moduleRef n="06" key="verse"/><!-- Unused by CUDL-->
                    <moduleRef n="07" key="drama"/><!-- Unused by CUDL-->
                    <moduleRef n="08" key="spoken"/><!-- Unused by CUDL-->
                    <moduleRef n="09" key="cmc"/><!-- Unused by CUDL-->
                    <moduleRef n="18" key="analysis"/>
                    <moduleRef n="10" key="dictionaries"/><!-- Unused by CUDL-->
                    <moduleRef n="11" key="msdescription"/>
                    <moduleRef n="12" key="transcr"/>
                    <moduleRef n="13" key="textcrit"/>
                    <moduleRef n="14" key="namesdates"/>
                    <moduleRef n="15" key="figures"/>
                    <moduleRef n="16" key="corpus"/><!-- Unused by CUDL-->
                    <moduleRef n="17" key="linking"/>
                    <moduleRef n="19" key="iso-fs"/><!-- Unused by CUDL-->
                    <moduleRef n="20" key="nets"/><!-- Unused by CUDL-->
                    <moduleRef n="22" key="certainty"/><!-- Unused by CUDL-->
                    <moduleRef n="23" key="tagdocs"/>

                    <!-- Include XInclude into our schema -->
                    <elementSpec ident="include" ns="http://www.w3.org/2001/XInclude" mode="add"><!-- DIFF -->
                        <desc xml:lang="en" versionDate="2014-01-12">The W3C XInclude element</desc>
                        <classes>
                            <memberOf key="model.common"/>
                            <memberOf key="model.teiHeaderPart"/>
                        </classes>
                        <content>
                            <elementRef key="fallback" minOccurs="0" maxOccurs="1"/>
                        </content>
                        <attList>
                            <attDef ident="href">
                                <desc xml:lang="en" versionDate="2014-01-12">pointer to the resource
                                    being included</desc>
                                <datatype>
                                    <dataRef key="teidata.pointer"/>
                                </datatype>
                            </attDef>
                            <attDef ident="parse" usage="opt">
                                <defaultVal>xml</defaultVal>
                                <valList type="closed">
                                    <valItem ident="xml"/>
                                    <valItem ident="text"/>
                                </valList>
                            </attDef>
                            <attDef ident="xpointer" usage="opt">
                                <datatype>
                                    <dataRef key="teidata.text"/>
                                </datatype>
                            </attDef>
                            <attDef ident="encoding" usage="opt">
                                <datatype>
                                    <dataRef key="teidata.text"/>
                                </datatype>
                            </attDef>
                            <attDef ident="accept" usage="opt">
                                <datatype>
                                    <dataRef key="teidata.text"/>
                                </datatype>
                            </attDef>
                            <attDef ident="accept-charset" usage="opt">
                                <datatype>
                                    <dataRef key="teidata.text"/>
                                </datatype>
                            </attDef>
                            <attDef ident="accept-language" usage="opt">
                                <datatype>
                                    <dataRef key="teidata.text"/>
                                </datatype>
                            </attDef>
                        </attList>
                    </elementSpec>
                    <elementSpec ident="fallback" ns="http://www.w3.org/2001/XInclude" mode="add">
                        <desc xml:lang="en" versionDate="2014-01-12">Wrapper for fallback elements
                            if an XInclude fails</desc>
                        <content>
                            <alternate>
                                <textNode/>
                                <anyElement/>
                            </alternate>
                        </content>
                    </elementSpec>
                    
                    
                    <!-- ********************** -->
                    <!-- Schematron constraints -->
                    <!-- ********************** -->


                    <!-- The TEI element must have xml:id in the form "manuscript_1234" (except in Genizah where it must be "volume_5678") -->
                    <elementSpec ident="TEI" module="textstructure" mode="change">
                        <constraintSpec scheme="schematron" ident="TEI.xmlid.check" mode="add">
                            <constraint>
                                <sch:rule
                                    context="tei:TEI">
                                    <sch:assert 
                                        test="matches(@xml:id, '^manuscript_\d+$') or contains(base-uri(.), 'genizah-mss')" 
                                        role="fatal">
                                        The root TEI element must have an @xml:id beginning with 
                                        "manuscript_" then a number (which must also be unique 
                                        across the entire catalogue).
                                    </sch:assert>
                                    <sch:assert 
                                        test="matches(@xml:id, '^volume_\d+$') or not(contains(base-uri(.), 'genizah-mss'))" 
                                        role="fatal">
                                        The root TEI element must have an @xml:id beginning with
                                        "volume_" then a number (which must also be unique 
                                        across the entire catalogue).
                                    </sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <!-- author inside msItem must have @key -->
                    <elementSpec ident="author" module="core" mode="change"><!-- DIFF -->
                        <constraintSpec ident="author.key.check" scheme="schematron" mode="replace">
                            <constraint>
                                <sch:rule
                                    context="//tei:msItem//tei:author[ancestor::tei:fileDesc[descendant::tei:idno[@type='catalogue']='Western']]">
                                    <sch:assert test="@key[matches(., 'person_\d+')]">In the
                                        medieval catalogue, the author element, when a child of
                                        msItem, must have a key matching the pattern
                                        'person_\d+'.</sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <!-- persName inside msDesc must have a key -->
                    <elementSpec ident="persName" module="namesdates" mode="change"><!-- DIFF -->
                        <constraintSpec ident="persName.key.check" scheme="schematron" mode="replace">
                            <constraint>
                                <sch:rule
                                    context="//tei:msDesc//tei:persName[ancestor::tei:fileDesc[descendant::tei:idno[@type='catalogue']='Western']]">
                                    <sch:assert test="@key[matches(., 'person_\d+')]">In the
                                        medieval catalogue, the persName element, when a descendant
                                        of msDesc, must have a key matching the pattern
                                        'person_\d+'.</sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <!-- placeName inside msDesc must have a key -->
                    <elementSpec ident="placeName" module="namesdates" mode="change"><!-- DIFF -->
                        <constraintSpec ident="placeName.key.check" scheme="schematron" mode="replace">
                            <constraint>
                                <sch:rule
                                    context="//tei:msDesc//tei:placeName[ancestor::tei:fileDesc[descendant::tei:idno[@type='catalogue']='Western']]">
                                    <sch:assert test="@key[matches(., 'place_\d+')]">In the medieval
                                        catalogue, the placeName element, when a descendant of
                                        msDesc, must have a key matching the pattern
                                        'place_\d+'.</sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <!-- orgName inside msDesc must have a key -->
                    <elementSpec ident="orgName" module="namesdates" mode="change"><!-- DIFF -->
                        <constraintSpec ident="orgName.key.check" scheme="schematron" mode="replace">
                            <constraint>
                                <sch:rule
                                    context="//tei:msDesc//tei:orgName[ancestor::tei:fileDesc[descendant::tei:idno[@type='catalogue']='Western']]">
                                    <sch:assert test="@key[matches(., 'org_\d+')]">In the medieval
                                        catalogue, the orgName element, when a descendant of msDesc,
                                        must have a key matching the pattern 'org_\d+'.</sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <!-- not yet adding a rule about @key for works -->

                    <!-- county inside origin must have a key -->
                    <elementSpec ident="country" module="namesdates" mode="change"><!-- DIFF -->
                        <constraintSpec ident="country.key.check" scheme="schematron" mode="replace">
                            <constraint>
                                <sch:rule
                                    context="//tei:origin//tei:country[ancestor::tei:fileDesc[descendant::tei:idno[@type='catalogue']='Western']]">
                                    <sch:assert test="@key[matches(., 'place_\d+')]">In the medieval
                                        catalogue, the country element, when a descendant of origin,
                                        must have a key matching the pattern
                                        'place_\d+'.</sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <!-- settlement inside origin must have a key -->
                    <elementSpec ident="settlement" module="namesdates" mode="change"><!-- DIFF -->
                        <constraintSpec ident="settlement.key.check" scheme="schematron" mode="replace">
                            <constraint>
                                <sch:rule
                                    context="//tei:origin//tei:settlement[ancestor::tei:fileDesc[descendant::tei:idno[@type='catalogue']='Western']]">
                                    <sch:assert test="@key[matches(., 'place_\d+')]">In the medieval
                                        catalogue, the settlement element, when a descendant of
                                        origin, must have a key matching the pattern
                                        'place_\d+'.</sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                    <classSpec ident="att.global.rendition" type="atts" mode="change" module="tei"><!-- DIFF -->
                        
                        <!-- Inform people when they use the rend attribute in ways that the web sites will ignore, 
                         and rendition/style attributes which it always ignores  -->
                        <constraintSpec ident="rend.info" scheme="schematron" mode="add"><!-- DIFF -->
                            <constraint>
                                <sch:rule 
                                    context="*[@rend]">
                                    <sch:report 
                                        test="self::tei:hi and not(every $r in tokenize(@rend, '\s+')[string-length() gt 0] satisfies $r = ('bold', 'italic', 'smallcaps', 'roman', 'superscript', 'subscript', 'underline', 'overline', 'strikethrough'))"
                                        role="info">
                                        Any values can be used in rend attributes, but the web site currently only supports combinations of: 
                                        bold, italic, roman, smallcaps, superscript, subscript, underline, overline, and strikethrough.
                                    </sch:report>
                                    <sch:report 
                                        test="self::tei:list and not(every $r in tokenize(@rend, '\s+')[string-length() gt 0] satisfies $r = ('numbered', 'ordered', 'ol', 'bulleted', 'unordered', 'ul'))"
                                        role="info">
                                        Any values can be used in rend attributes, but the web site currently only supports combinations of: 
                                        numbered, ordered, ol, bulleted, unordered, and ul.
                                    </sch:report>
                                    <sch:assert 
                                        test="self::tei:hi or self::tei:list" 
                                        role="info">
                                        The web site currently only supports rend attributes for hi and list elements. Using it on <sch:value-of select="name(.)"/> 
                                        elements is valid but will be ignored.
                                    </sch:assert>
                                </sch:rule>
                                <sch:rule 
                                    context="*[@rendition or @style]">
                                    <sch:assert 
                                        test="false()"
                                        role="info">
                                        The web site currently ignores rendition and style attributes.
                                    </sch:assert>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                        
                      
                        
                        <!-- Warn about empty or self-closing elements with a @key -->
                        

                    </classSpec>
                    
                    <!-- Warn about a common typo -->
                    <elementSpec ident="surrogates" module="msdescription" mode="change"><!-- DIFF -->
                        <constraintSpec ident="facsimile.warn" scheme="schematron">
                            <constraint>
                                <sch:rule 
                                    context="//tei:surrogates/tei:bibl">
                                    <sch:report 
                                        test="contains(@type, 'fascimile')"
                                        role="warn">
                                        The type attribute of "<sch:value-of select="@type"/>" contains a typo (fascimile should be facsimile).
                                    </sch:report>
                                </sch:rule>
                            </constraint>
                        </constraintSpec>
                    </elementSpec>

                </schemaSpec>
            </div>
        </body>
    </text>
</TEI>
